/**
 * SSH-Attacker - A Modular Penetration Testing Framework for SSH
 *
 * <p>Copyright 2014-2021 Ruhr University Bochum, Paderborn University, and Hackmanit GmbH
 *
 * <p>Licensed under Apache License 2.0 http://www.apache.org/licenses/LICENSE-2.0
 */
package de.rub.nds.sshattacker.core.protocol.transport.parser;

import static org.junit.jupiter.api.Assertions.*;

import de.rub.nds.modifiablevariable.util.ArrayConverter;
import de.rub.nds.sshattacker.core.protocol.transport.message.BinaryPacket;
import de.rub.nds.sshattacker.core.protocol.transport.parser.BinaryPacketParser;
import de.rub.nds.sshattacker.core.state.SshContext;
import java.util.stream.Stream;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

/** A set of tests for the BinaryPacketParser class */
public class BinaryPacketParserTest {
    /**
     * Provides a stream of test vectors for the BinaryPacketParser class
     *
     * @return A stream of test vectors to feed the testParseEmptyMac unit test
     */
    public static Stream<Arguments> provideTestVectorsEmptyMac() {
        return Stream.of(
                Arguments.of(
                        ArrayConverter.hexStringToByteArray(
                                "0000020c0814e0b018941e57551ede3fde36a71e08080000007a637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e697374703532312c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d7368613235360000000f7373682d6473732c7373682d7273610000005f63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733235362d6374722c6165733139322d6374722c6165733132382d6374722c6165733235362d6362632c6165733139322d6362632c6165733132382d6362630000005f63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733235362d6374722c6165733139322d6374722c6165733132382d6374722c6165733235362d6362632c6165733139322d6362632c6165733132382d63626300000025686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d7368613100000025686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d736861310000001a6e6f6e652c7a6c69622c7a6c6962406f70656e7373682e636f6d0000001a6e6f6e652c7a6c69622c7a6c6962406f70656e7373682e636f6d000000000000000000000000000000000000000000"),
                        524,
                        (byte) 8,
                        ArrayConverter.hexStringToByteArray(
                                "14e0b018941e57551ede3fde36a71e08080000007a637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e697374703532312c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d7368613235360000000f7373682d6473732c7373682d7273610000005f63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733235362d6374722c6165733139322d6374722c6165733132382d6374722c6165733235362d6362632c6165733139322d6362632c6165733132382d6362630000005f63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733235362d6374722c6165733139322d6374722c6165733132382d6374722c6165733235362d6362632c6165733139322d6362632c6165733132382d63626300000025686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d7368613100000025686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d736861310000001a6e6f6e652c7a6c69622c7a6c6962406f70656e7373682e636f6d0000001a6e6f6e652c7a6c69622c7a6c6962406f70656e7373682e636f6d00000000000000000000000000"),
                        ArrayConverter.hexStringToByteArray("0000000000000000"),
                        new byte[] {}),
                Arguments.of(
                        ArrayConverter.hexStringToByteArray(
                                "0000056c0414fbf207980a5e1f64469ee7dad6593e070000010d637572766532353531392d7368613235362c637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e697374703532312c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d7368613235362c6469666669652d68656c6c6d616e2d67726f757031362d7368613531322c6469666669652d68656c6c6d616e2d67726f757031382d7368613531322c6469666669652d68656c6c6d616e2d67726f757031342d7368613235362c6469666669652d68656c6c6d616e2d67726f757031342d736861312c6578742d696e666f2d63000001667273612d736861322d3531322d636572742d763031406f70656e7373682e636f6d2c7273612d736861322d3235362d636572742d763031406f70656e7373682e636f6d2c7373682d7273612d636572742d763031406f70656e7373682e636f6d2c7273612d736861322d3531322c7273612d736861322d3235362c7373682d7273612c65636473612d736861322d6e697374703235362d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703338342d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703532312d636572742d763031406f70656e7373682e636f6d2c7373682d656432353531392d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703235362c65636473612d736861322d6e697374703338342c65636473612d736861322d6e697374703532312c7373682d656432353531390000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d0000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d73686131000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d736861310000001a6e6f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c69620000001a6e6f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c69620000000000000000000000000000000000"),
                        1388,
                        (byte) 4,
                        ArrayConverter.hexStringToByteArray(
                                "14fbf207980a5e1f64469ee7dad6593e070000010d637572766532353531392d7368613235362c637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e697374703532312c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d7368613235362c6469666669652d68656c6c6d616e2d67726f757031362d7368613531322c6469666669652d68656c6c6d616e2d67726f757031382d7368613531322c6469666669652d68656c6c6d616e2d67726f757031342d7368613235362c6469666669652d68656c6c6d616e2d67726f757031342d736861312c6578742d696e666f2d63000001667273612d736861322d3531322d636572742d763031406f70656e7373682e636f6d2c7273612d736861322d3235362d636572742d763031406f70656e7373682e636f6d2c7373682d7273612d636572742d763031406f70656e7373682e636f6d2c7273612d736861322d3531322c7273612d736861322d3235362c7373682d7273612c65636473612d736861322d6e697374703235362d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703338342d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703532312d636572742d763031406f70656e7373682e636f6d2c7373682d656432353531392d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703235362c65636473612d736861322d6e697374703338342c65636473612d736861322d6e697374703532312c7373682d656432353531390000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d0000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d73686131000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d736861310000001a6e6f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c69620000001a6e6f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c696200000000000000000000000000"),
                        ArrayConverter.hexStringToByteArray("00000000"),
                        new byte[] {}),
                Arguments.of(
                        ArrayConverter.hexStringToByteArray(
                                "0000002c061e00000020c3579aa0b92395e888ed16a546587c5d8879f0f2f813b2bc68bab3325b9a6f0f000000000000"),
                        44,
                        (byte) 6,
                        ArrayConverter.hexStringToByteArray(
                                "1e00000020c3579aa0b92395e888ed16a546587c5d8879f0f2f813b2bc68bab3325b9a6f0f"),
                        ArrayConverter.hexStringToByteArray("000000000000"),
                        new byte[] {}),
                Arguments.of(
                        ArrayConverter.hexStringToByteArray(
                                "0000025c0a1f00000115000000077373682d72736100000001230000010100ab603b8511a67679bdb540db3bd2034b004ae936d06be3d760f08fcbaadb4eb4edc3b3c791c70aae9a74c95869e4774421c2abea92e554305f38b5fd414b3208e574c337e320936518462c7652c98b31e16e7da6523bd200742a6444d83fcd5e1732d03673c7b7811555487b55f0c4494f3829ece60f94255a95cb9af537d7fc8c7fe49ef318474ef2920992052265b0a06ea66d4a167fd9f3a48a1a4a307ec1eaaa5149a969a6ac5d56a5ef627e517d81fb644f5b745c4f478ecd082a9492f744aad326f76c8c4dc9100bc6ab79461d2657cb6f06dec92e6b64a6562ff0e32084ea06ce0ea9d35a583bfb00bad38c9d19703c549892e5aa78dc95e250514069000000201c79ad1bb2ac0016492475c7d3807847e9827b640565c170732d001e164148430000010f000000077373682d727361000001005e06b4b5f5b1a267aa567d7e424b7e01ef2f6a1c3a1f7e1389cc8c1b195915383d745eb9b70cd3d63377c436124332e60b804410f7363d7fdcf2af1a97c2f5b78962eeb64b5c12bf384f930c5bf974d7e38ed86cd54cc63145e01b6ecebd0f7ef0ea19de2950bffc3a38843d3d6efe1e8e72e95a4d94f27af01d84fc15da0649b4853286cd7fc107bdd6c0d08fa75200fb38b5be9403185758f1f5b0a9cae8ff5f689d9d56c5bd34d83bfd5c7b9015aed7c3e70ea97ba9c0e1fb2b91780f96a3a3d2f789c39cd54149b3ca19f8694826bd37e0af153042ca7e217f0f4e79fb6e248624273c40f222f2d72a5469305a135bf1c0da0f2adfb37486740ffbc5136500000000000000000000"),
                        604,
                        (byte) 10,
                        ArrayConverter.hexStringToByteArray(
                                "1f00000115000000077373682d72736100000001230000010100ab603b8511a67679bdb540db3bd2034b004ae936d06be3d760f08fcbaadb4eb4edc3b3c791c70aae9a74c95869e4774421c2abea92e554305f38b5fd414b3208e574c337e320936518462c7652c98b31e16e7da6523bd200742a6444d83fcd5e1732d03673c7b7811555487b55f0c4494f3829ece60f94255a95cb9af537d7fc8c7fe49ef318474ef2920992052265b0a06ea66d4a167fd9f3a48a1a4a307ec1eaaa5149a969a6ac5d56a5ef627e517d81fb644f5b745c4f478ecd082a9492f744aad326f76c8c4dc9100bc6ab79461d2657cb6f06dec92e6b64a6562ff0e32084ea06ce0ea9d35a583bfb00bad38c9d19703c549892e5aa78dc95e250514069000000201c79ad1bb2ac0016492475c7d3807847e9827b640565c170732d001e164148430000010f000000077373682d727361000001005e06b4b5f5b1a267aa567d7e424b7e01ef2f6a1c3a1f7e1389cc8c1b195915383d745eb9b70cd3d63377c436124332e60b804410f7363d7fdcf2af1a97c2f5b78962eeb64b5c12bf384f930c5bf974d7e38ed86cd54cc63145e01b6ecebd0f7ef0ea19de2950bffc3a38843d3d6efe1e8e72e95a4d94f27af01d84fc15da0649b4853286cd7fc107bdd6c0d08fa75200fb38b5be9403185758f1f5b0a9cae8ff5f689d9d56c5bd34d83bfd5c7b9015aed7c3e70ea97ba9c0e1fb2b91780f96a3a3d2f789c39cd54149b3ca19f8694826bd37e0af153042ca7e217f0f4e79fb6e248624273c40f222f2d72a5469305a135bf1c0da0f2adfb37486740ffbc51365"),
                        ArrayConverter.hexStringToByteArray("00000000000000000000"),
                        new byte[] {}),
                Arguments.of(
                        ArrayConverter.hexStringToByteArray("0000000c0a1500000000000000000000"),
                        12,
                        (byte) 10,
                        ArrayConverter.hexStringToByteArray("15"),
                        ArrayConverter.hexStringToByteArray("00000000000000000000"),
                        new byte[] {}));
    }

    /**
     * Test of BinaryPacketParser::parse without a MAC negotiated
     *
     * @param providedBytes Bytes to parse
     * @param expectedPacketLength Expected packet length of the BinaryPacket
     * @param expectedPaddingLength Expected padding length of the BinaryPacket
     * @param expectedPayload Expected payload of the BinaryPacket
     * @param expectedPadding Expected padding of the BinaryPacket
     * @param expectedMac Expected MAC of the BinaryPacket (empty byte array)
     */
    @ParameterizedTest
    @MethodSource("provideTestVectorsEmptyMac")
    public void testParseEmptyMac(
            byte[] providedBytes,
            int expectedPacketLength,
            byte expectedPaddingLength,
            byte[] expectedPayload,
            byte[] expectedPadding,
            byte[] expectedMac) {
        BinaryPacket msg = new BinaryPacketParser(0, providedBytes, new SshContext()).parse();

        assertEquals(expectedPacketLength, msg.getPacketLength().getValue().intValue());
        assertEquals(expectedPaddingLength, msg.getPaddingLength().getValue().intValue());
        assertArrayEquals(expectedPayload, msg.getPayload().getValue());
        assertArrayEquals(expectedPadding, msg.getPadding().getValue());
        assertArrayEquals(expectedMac, msg.getMac().getValue());
    }
}
