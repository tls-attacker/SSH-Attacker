/**
 * SSH-Attacker - A Modular Penetration Testing Framework for SSH
 *
 * <p>Copyright 2014-2021 Ruhr University Bochum, Paderborn University, and Hackmanit GmbH
 *
 * <p>Licensed under Apache License 2.0 http://www.apache.org/licenses/LICENSE-2.0
 */
package de.rub.nds.sshattacker.core.protocol.transport.serializer;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

import de.rub.nds.modifiablevariable.util.ArrayConverter;
import de.rub.nds.sshattacker.core.protocol.transport.message.DhGexKeyExchangeInitMessage;
import de.rub.nds.sshattacker.core.protocol.transport.serializer.DhGexKeyExchangeInitMessageSerializer;
import java.math.BigInteger;
import java.util.stream.Stream;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

public class DhGexKeyExchangeInitMessageSerializerTest {
    /**
     * Provides a stream of test vectors for the DhGexKeyExchangeInitMessageSerializer class
     *
     * @return A stream of test vectors to feed the testSerialize unit test
     */
    public static Stream<Arguments> provideTestVectors() {
        return Stream.of(
                Arguments.of(
                        ArrayConverter.hexStringToByteArray(
                                "200000010100BFFF3EF883AEC6299FFB3140E8A389AB063340CFEEA512286653A1EE730A698B9D24D4F873DC0531CC5440C13FEA48C8004ECE6D3A775F56EECF3F02D9EF697E7793833B7C41EAB29ACD11E3206053812B79A81D71C41468536136410995D505A38425E625A516C1B972C171721E15C9A1C8C8AE39329C1D124643ACF0611D89652266B4A740DDFED3E415FF43B75A448DA9DB20B2C0627D6679F224C1D3941BBCFCF9DC7D4717AF44605D5AEA71551C014CAFB5CFDC757CEE1A29D23375D28B0AE59CEB7C2E4210305C7C1A7A2013368017ED5F11A393D0DD5DF87F75F492DC3B1D4D538D7DE057D6F69A08818EC7A4B8DA8643CB1DC477044A900F138DE01F"),
                        257,
                        new BigInteger(
                                "BFFF3EF883AEC6299FFB3140E8A389AB063340CFEEA512286653A1EE730A698B9D24D4F873DC0531CC5440C13FEA48C8004ECE6D3A775F56EECF3F02D9EF697E7793833B7C41EAB29ACD11E3206053812B79A81D71C41468536136410995D505A38425E625A516C1B972C171721E15C9A1C8C8AE39329C1D124643ACF0611D89652266B4A740DDFED3E415FF43B75A448DA9DB20B2C0627D6679F224C1D3941BBCFCF9DC7D4717AF44605D5AEA71551C014CAFB5CFDC757CEE1A29D23375D28B0AE59CEB7C2E4210305C7C1A7A2013368017ED5F11A393D0DD5DF87F75F492DC3B1D4D538D7DE057D6F69A08818EC7A4B8DA8643CB1DC477044A900F138DE01F",
                                16)),
                Arguments.of(
                        ArrayConverter.hexStringToByteArray(
                                "200000010100CDEE54D2F226DDABCF5E2D3D020219B04C7EE6EAB32570936A3F0DEFE375BA42EC4A934C58DBE10AAEFB9EDB71124DAC335AD28CCC50DA038BE6243FEA94F51F390ED247D015CDCD31247A98183D82540BFAEDEEFF602DD7FA817D2FE563701F32361AC988D5C1827F39D5DD5A18153289465F73F9ED350D5979D8AC90CEB90F6D224B07803E4AC14D9339E7768A9A31ADA436DE0353B52527E334E3BB95C0D04CC37D6DFFF4A5B0059B09D1FEC039DEFB3B02AE6C5C52C0A6DF08705B4CA9FB11FE58A8E1048E4E07E5160357EAE1E7F15BD20D471E0F58BB93D186692BC44E97361C737969C9DB431F3B8D55261FE14224E38F5315AA02DA7F672ECA2A08C7"),
                        257,
                        new BigInteger(
                                "CDEE54D2F226DDABCF5E2D3D020219B04C7EE6EAB32570936A3F0DEFE375BA42EC4A934C58DBE10AAEFB9EDB71124DAC335AD28CCC50DA038BE6243FEA94F51F390ED247D015CDCD31247A98183D82540BFAEDEEFF602DD7FA817D2FE563701F32361AC988D5C1827F39D5DD5A18153289465F73F9ED350D5979D8AC90CEB90F6D224B07803E4AC14D9339E7768A9A31ADA436DE0353B52527E334E3BB95C0D04CC37D6DFFF4A5B0059B09D1FEC039DEFB3B02AE6C5C52C0A6DF08705B4CA9FB11FE58A8E1048E4E07E5160357EAE1E7F15BD20D471E0F58BB93D186692BC44E97361C737969C9DB431F3B8D55261FE14224E38F5315AA02DA7F672ECA2A08C7",
                                16)),
                Arguments.of(
                        ArrayConverter.hexStringToByteArray(
                                "20000001004D91997C0C83B5F532EE9CDC1DEEA77CA9CAA793482E972F0D3668218047B1A69234425B7AC9F4C5C9F1035FE9D394AA21B4D68BE4213C4F33BC020A9961F88C3ECFA2F72F7D6AA88F9CD59B50AD84C8B0D4EDA9871D04A57B2545D391BFBE9F884D33DC0521F8929A132F402A3634D6DE2E8872095C5BD50A945996E277A6027CD12103F55BCF54144293C6B216175A0B1CFE5048BAB3243064748877F3EFE07B8F03FB04421E58874646456399E00017D385B232A042D6BFC9AB49CB81117C6831318BA017C3183E81B5CF51CA3ED1A41857BECA1BCC74E1DCAA176F3FBC3238DC73232CCF79999ED3C41C46B522B4EC13B3F5531C3A5B4B4E701F7443C6F1"),
                        256,
                        new BigInteger(
                                "4D91997C0C83B5F532EE9CDC1DEEA77CA9CAA793482E972F0D3668218047B1A69234425B7AC9F4C5C9F1035FE9D394AA21B4D68BE4213C4F33BC020A9961F88C3ECFA2F72F7D6AA88F9CD59B50AD84C8B0D4EDA9871D04A57B2545D391BFBE9F884D33DC0521F8929A132F402A3634D6DE2E8872095C5BD50A945996E277A6027CD12103F55BCF54144293C6B216175A0B1CFE5048BAB3243064748877F3EFE07B8F03FB04421E58874646456399E00017D385B232A042D6BFC9AB49CB81117C6831318BA017C3183E81B5CF51CA3ED1A41857BECA1BCC74E1DCAA176F3FBC3238DC73232CCF79999ED3C41C46B522B4EC13B3F5531C3A5B4B4E701F7443C6F1",
                                16)));
    }

    /**
     * Test of DhGexKeyExchangeInitMessageSerializer::serialize method
     *
     * @param expectedBytes Expected output bytes of the serialize() call
     * @param providedPublicKey Local public key for the diffie hellman key exchange
     */
    @ParameterizedTest
    @MethodSource("provideTestVectors")
    public void testSerialize(
            byte[] expectedBytes, int providedPublicKeyLength, BigInteger providedPublicKey) {
        DhGexKeyExchangeInitMessage msg = new DhGexKeyExchangeInitMessage();
        msg.setPublicKeyLength(providedPublicKeyLength);
        msg.setPublicKey(providedPublicKey);
        DhGexKeyExchangeInitMessageSerializer serializer =
                new DhGexKeyExchangeInitMessageSerializer(msg);

        assertArrayEquals(expectedBytes, serializer.serialize());
    }
}
