/*
 * SSH-Attacker - A Modular Penetration Testing Framework for SSH
 *
 * Copyright 2014-2022 Ruhr University Bochum, Paderborn University, and Hackmanit GmbH
 *
 * Licensed under Apache License 2.0 http://www.apache.org/licenses/LICENSE-2.0
 */
package de.rub.nds.sshattacker.core.crypto.ntrup.sntrup.core;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

public class ShortTest {
    public final SntrupParameterSet set = SntrupParameterSet.KEM_SNTRUP_761;

    @Test
    public void testCreateRandomShort() {
        Short r = Short.createRandomShort(set);
        assertEquals(set, r.getSet());
        assertFalse(r.getShrt().stream().filter(l -> Math.abs(l) > 1).findFirst().isPresent());
        assertEquals(r.getSet().getW(), r.getShrt().stream().filter(l -> 1 == Math.abs(l)).count());
    }

    @Test
    public void testCreateShort() {
        long[] shortArray = {
            -1, 0, 0, -1, 0, 0, -1, 1, 0, 1, 0, 0, 1, 0, 0, -1, 1, 0, -1, -1, 0, 1, 0, 0, -1, 0, 0,
            0, 0, 1, -1, 1, 1, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 1,
            1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 0, 0, -1, -1, 0, -1, 1, -1, 0, 1, 0, -1, 0, -1, -1, 1,
            0, -1, 0, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, -1, -1,
            0, 1, 0, -1, 0, 1, 0, 0, -1, 0, -1, 0, -1, -1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, -1, 1, 0,
            0, 0, -1, -1, 0, 1, 0, 0, 0, -1, 0, -1, 1, 0, 0, -1, 0, 1, 0, -1, 0, -1, -1, -1, -1, 0,
            1, 1, 1, -1, -1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0,
            0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
            -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, -1, 0, 0, 0, -1, -1, -1, 0, 1, 0, 0, -1, 0, 0,
            0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, -1, -1, -1, 0, 0, -1, 0, 0, 0, 1, -1, 0,
            0, 0, 0, 1, 0, 1, 0, -1, 1, 0, 0, 0, -1, 0, 0, 0, 1, -1, 0, 0, 1, 1, -1, 0, -1, 1, -1,
            0, 0, -1, 0, 0, 0, 0, 0, -1, 1, 1, 0, 0, 0, 0, -1, 1, 0, 0, 0, -1, 1, 0, -1, 1, 0, 0,
            -1, 0, -1, -1, 0, -1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, -1,
            -1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1,
            -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, -1,
            1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0,
            1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, -1, -1, 0,
            0, 0, 1, 1, 0, -1, 1, -1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, -1, 1,
            1, 0, 1, 0, 1, 0, 1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 1, 0, 1, 0,
            1, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0,
            -1, 1, -1, 1, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,
            -1, 0, 0, -1, 0, 0, 0, -1, 1, 0, -1, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, 1, 0, 1, 0, 0, -1,
            1, -1, 0, 0, 0, 0, 0, -1, 1, 0, -1, 1, 1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1,
            0, 0, 0, -1, 1, 0, -1, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0,
            0, 0, -1, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1,
            0, 1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0,
            0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, -1,
            -1, -1, 0, -1, 0, 0, 0, 0, 0, 1, -1, 0, 0, 1, 0, 1, 1, -1
        };
        long[] notSmallArray = {
            240, -1, 0, 1, 1, -1, -1, 1, 0, 0, 0, 0, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, -1, 1, 1,
            0, -1, -1, -1, 0, -1, 0, 1, 0, 0, 1, 1, 1, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, -1,
            -1, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 1, 1,
            0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0,
            -1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, -1, 0, -1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,
            0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, -1, 1, 0, 1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1,
            0, 0, -1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, -1, 1, 0, 0, 0, 1, -1, 0, -1, -1, -1,
            0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0,
            1, 1, -1, 0, 0, 1, 1, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
            0, 0, -1, 0, -1, 1, 0, 0, 0, -1, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 1, 0, -1, 0,
            1, 1, 1, -1, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,
            -1, 0, 0, 1, -1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1,
            1, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 1, 0, -1, -1, 0, -1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, -1, 0, 0, -1, 0,
            0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0,
            0, 0, 0, 0, 1, -1, 0, -1, 0, 0, 0, 0, -1, 0, 1, 1, 0, -1, 1, -1, 0, -1, 0, 0, 0, 0, -1,
            0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 0, 0, 0, 0,
            -1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
            0, -1, 0, -1, 0, 1, 1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1, 0, 0,
            -1, 0, 0, 1, -1, -1, 0, -1, 0, 1, 0, 1, -1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, -1, 0, 0, 0,
            0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1,
            0, -1, -1, 0, -1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, 0,
            0, 0, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 1, 1, 1, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 1, 1, 1, 0, 0, 0, -1, 0, -1, 1, 1, -1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,
            -1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, -1, 0, 0, 1, 0, 1,
            0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 1, 0, -1, 0, 0, 1, 0, -1, 0, 1, -1, 1, 0, 0, -1, 1, 1, 0,
            0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, -1, 0, -1, -1, 0, -1, -1, 0, 0, 1, 0, 0, 1,
            0, 1, 0, 0, 0, 1, 0, 1, 1, 1
        };
        long[] notWeightWArray = {
            0, -1, 0, 1, 1, -1, -1, 1, 0, 0, 0, 0, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, -1, 1, 1,
            0, -1, -1, -1, 0, -1, 0, 1, 0, 0, 1, 1, 1, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, -1,
            -1, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 1, 1,
            0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0,
            -1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, -1, 0, -1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,
            0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, -1, 1, 0, 1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1,
            0, 0, -1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, -1, 1, 0, 0, 0, 1, -1, 0, -1, -1, -1,
            0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0,
            1, 1, -1, 0, 0, 1, 1, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
            0, 0, -1, 0, -1, 1, 0, 0, 0, -1, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 1, 0, -1, 0,
            1, 1, 1, -1, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,
            -1, 0, 0, 1, -1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1,
            1, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 1, 0, -1, -1, 0, -1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, -1, 0, 0, -1, 0,
            0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0,
            0, 0, 0, 0, 1, -1, 0, -1, 0, 0, 0, 0, -1, 0, 1, 1, 0, -1, 1, -1, 0, -1, 0, 0, 0, 0, -1,
            0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 0, 0, 0, 0,
            -1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
            0, -1, 0, -1, 0, 1, 1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1, 0, 0,
            -1, 0, 0, 1, -1, -1, 0, -1, 0, 1, 0, 1, -1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, -1, 0, 0, 0,
            0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1,
            0, -1, -1, 0, -1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, 0,
            0, 0, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 1, 1, 1, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 1, 1, 1, 0, 0, 0, -1, 0, -1, 1, 1, -1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,
            -1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, -1, 0, 0, 1, 0, 1,
            0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 1, 0, -1, 0, 0, 1, 0, -1, 0, 1, -1, 1, 0, 0, -1, 1, 1, 0,
            0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, -1, 0, -1, -1, 0, -1, -1, 0, 0, 1, 0, 0, 1,
            0, 1, 0, 0, 0, 1, 0, 1, 1, 1
        };

        Short isShort = Short.createShort(set, shortArray);

        assertEquals(set, isShort.getSet());
        assertFalse(
                isShort.getShrt().stream().filter(l -> Math.abs(l) > 1).findFirst().isPresent());
        assertEquals(
                isShort.getSet().getW(),
                isShort.getShrt().stream().filter(l -> 1 == Math.abs(l)).count());

        Exception exception =
                assertThrows(
                        IllegalArgumentException.class,
                        () -> Short.createShort(set, notSmallArray));
        assertTrue(
                exception.getMessage().contains("Could not create Short with given coefficients"));

        Exception exception2 =
                assertThrows(
                        IllegalArgumentException.class,
                        () -> Short.createShort(set, notWeightWArray));
        assertTrue(
                exception2.getMessage().contains("Could not create Short with given coefficients"));
    }

    @Test
    public void testEncoding() {
        for (int i = 0; i < 10; i++) {
            Short shrt = Short.createRandomShort(set);
            byte[] encoded = shrt.encode();
            Short decoded = Short.decode(set, encoded);
            assertEquals(shrt, decoded);
        }
    }
}
