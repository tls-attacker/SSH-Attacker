/**
 * SSH-Attacker - A Modular Penetration Testing Framework for SSH
 *
 * Copyright 2014-2021 Ruhr University Bochum, Paderborn University,
 * and Hackmanit GmbH
 *
 * Licensed under Apache License 2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 */
package de.rub.nds.sshattacker.core.crypto;

import de.rub.nds.modifiablevariable.util.ArrayConverter;
import de.rub.nds.sshattacker.core.constants.KeyExchangeAlgorithm;
import de.rub.nds.sshattacker.core.crypto.hash.EcdhExchangeHash;
import de.rub.nds.sshattacker.core.protocol.message.EcdhKeyExchangeInitMessage;
import de.rub.nds.sshattacker.core.protocol.message.EcdhKeyExchangeReplyMessage;
import de.rub.nds.sshattacker.core.protocol.message.VersionExchangeMessage;
import de.rub.nds.sshattacker.core.protocol.parser.EcdhKeyExchangeInitMessageParser;
import de.rub.nds.sshattacker.core.protocol.parser.EcdhKeyExchangeReplyMessageParser;

import de.rub.nds.sshattacker.core.state.SshContext;
import org.junit.jupiter.api.Test;

import java.math.BigInteger;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

public class KeyDerivationTest {

    /**
     * Test key derivation using KeyDerivation.deriveKey
     */
    @Test
    public void testDeriveKey() {
        BigInteger sharedSecret = new BigInteger("f01590a6dbe06a5f69a0ed95a4352f7ecd38eb2e1d82dfd5bda828007e6de112", 16);
        byte[] exchangeHash = ArrayConverter
                .hexStringToByteArray("bc2e0234e4feefa2835970b462dbdcecdf92deed61010155796cb749261da902");

        byte[] expectedKeyA = ArrayConverter
                .hexStringToByteArray("22a8b14ea027a35fa5da85390324b521d35d493cfb374879abcf03b92f1efec7578f27de759d6be0de4b573aee94ccfed00d6ae1538af0dc8ecc3a6a6ef99557");
        byte[] expectedKeyB = ArrayConverter
                .hexStringToByteArray("3f33224b08c8cf18ec4cee2e5ede0c03f23c11a4cb8d7445d53ed55ee9f5354184d60fc67840f815bcd8a48ff92aa358bd7736ad734f7123c50867f91cd2595d");
        byte[] expectedKeyC = ArrayConverter
                .hexStringToByteArray("d39824b7fff07ca4ebad1f06ce300983b52f28b72359371e42d008aad0960708c5e421aba1c9f13731d25cd4faf10b43fb48d36bfb7fc1d8d32f6120529d13f8");
        byte[] expectedKeyD = ArrayConverter
                .hexStringToByteArray("6c64c65b39b4d87bf5e8c799009618c23c6edbc065e37af712e80e231da943f4d99072dacf310f4885bef0189d5a016aeb406798eb4d514d75afabce8dce99b0");
        byte[] expectedKeyE = ArrayConverter
                .hexStringToByteArray("c87e9104796e2359a677895e2ac9e1f371220ff8e49346cd9b1666f22de1f03e0905679661a682cd6d10976e44f38fff489da3e0b85f53dc27cd8de90837ef8c");
        byte[] expectedKeyF = ArrayConverter
                .hexStringToByteArray("8dd26c678a145f99716eefe92edd46439b81197e2cad71defdc7f02c8c4046c265a9d0775c9f2d0ee90e1359a144c30c1db8bccd1575de5458b8a19ad14d7d53");

        byte[] keyA = KeyDerivation.deriveKey(sharedSecret, exchangeHash, 'A', exchangeHash, expectedKeyA.length,
                "SHA-256");
        byte[] keyB = KeyDerivation.deriveKey(sharedSecret, exchangeHash, 'B', exchangeHash, expectedKeyB.length,
                "SHA-256");
        byte[] keyC = KeyDerivation.deriveKey(sharedSecret, exchangeHash, 'C', exchangeHash, expectedKeyC.length,
                "SHA-256");
        byte[] keyD = KeyDerivation.deriveKey(sharedSecret, exchangeHash, 'D', exchangeHash, expectedKeyD.length,
                "SHA-256");
        byte[] keyE = KeyDerivation.deriveKey(sharedSecret, exchangeHash, 'E', exchangeHash, expectedKeyE.length,
                "SHA-256");
        byte[] keyF = KeyDerivation.deriveKey(sharedSecret, exchangeHash, 'F', exchangeHash, expectedKeyF.length,
                "SHA-256");

        assertArrayEquals(expectedKeyA, keyA);
        assertArrayEquals(expectedKeyB, keyB);
        assertArrayEquals(expectedKeyC, keyC);
        assertArrayEquals(expectedKeyD, keyD);
        assertArrayEquals(expectedKeyE, keyE);
        assertArrayEquals(expectedKeyF, keyF);
    }

    /**
     * Test the computation of an ecdh exchange hash using the EcdhExchangeHash class
     */
    @Test
    public void testComputeECDHExchangeHash() {
        VersionExchangeMessage clientVersion = new VersionExchangeMessage();
        clientVersion.setVersion("SSH-2.0-OpenSSH_7.9");
        clientVersion.setComment("");
        VersionExchangeMessage serverVersion = new VersionExchangeMessage();
        serverVersion.setVersion("SSH-2.0-OpenSSH_7.9");
        serverVersion.setComment("");

        EcdhKeyExchangeInitMessage ecdhInit = new EcdhKeyExchangeInitMessageParser(
                0,
                ArrayConverter
                        .hexStringToByteArray("30000000207ca8902c60338482678b029a7b4484cb69e167922865c1217203dcb8050cd043"))
                .parse();
        EcdhKeyExchangeReplyMessage ecdhReply = new EcdhKeyExchangeReplyMessageParser(
                0,
                ArrayConverter
                        .hexStringToByteArray("31000000680000001365636473612d736861322d6e69737470323536000000086e69737470323536000000410435496f94112c3234092471322c26dd21ebfd2da156e5a17dcc5dc98020afedd64ae82e5d4c28251187a2191fe85ae43de9734711c087b784eaa713d5b6e065410000002020b9f89aba2d7da23775b3ce085ff65f4d4b7ccf51ce2d073ef9158d6df1e905000000630000001365636473612d736861322d6e6973747032353600000048000000204e553a825dd144d7ddbd38cbd10a153a8a4ad597bf8da7ef1fe2546c851d6e89000000205bc4705cdac12213822e61c3b48ab7c84489ef3be0bb94ef524a45664b473856"))
                .parse();

        byte[] expectedHash = ArrayConverter
                .hexStringToByteArray("76ccc4d868fbce7a0b02b4545ccf01893ac034c73e8f7be3452fdf22360d6f3d");

        SshContext context = new SshContext();
        context.setKeyExchangeAlgorithm(KeyExchangeAlgorithm.ECDH_SHA2_NISTP256);
        EcdhExchangeHash exchangeHash = new EcdhExchangeHash(context);

        exchangeHash.setClientVersion(clientVersion);
        exchangeHash.setServerVersion(serverVersion);
        exchangeHash
                .setClientKeyExchangeInit(ArrayConverter
                        .hexStringToByteArray("14c20497e7fc475072fd94347c70ef86260000010d637572766532353531392d7368613235362c637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e697374703532312c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d7368613235362c6469666669652d68656c6c6d616e2d67726f757031362d7368613531322c6469666669652d68656c6c6d616e2d67726f757031382d7368613531322c6469666669652d68656c6c6d616e2d67726f757031342d7368613235362c6469666669652d68656c6c6d616e2d67726f757031342d736861312c6578742d696e666f2d630000016665636473612d736861322d6e697374703235362d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703338342d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703532312d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703235362c65636473612d736861322d6e697374703338342c65636473612d736861322d6e697374703532312c7373682d656432353531392d636572742d763031406f70656e7373682e636f6d2c7273612d736861322d3531322d636572742d763031406f70656e7373682e636f6d2c7273612d736861322d3235362d636572742d763031406f70656e7373682e636f6d2c7373682d7273612d636572742d763031406f70656e7373682e636f6d2c7373682d656432353531392c7273612d736861322d3531322c7273612d736861322d3235362c7373682d7273610000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d0000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d73686131000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d736861310000001a6e6f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c69620000001a6e6f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c696200000000000000000000000000"));
        exchangeHash
                .setServerKeyExchangeInit(ArrayConverter
                        .hexStringToByteArray("147fe045782da34c08cbd3e03a6b4b4b1000000102637572766532353531392d7368613235362c637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e697374703532312c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d7368613235362c6469666669652d68656c6c6d616e2d67726f757031362d7368613531322c6469666669652d68656c6c6d616e2d67726f757031382d7368613531322c6469666669652d68656c6c6d616e2d67726f757031342d7368613235362c6469666669652d68656c6c6d616e2d67726f757031342d73686131000000417273612d736861322d3531322c7273612d736861322d3235362c7373682d7273612c65636473612d736861322d6e697374703235362c7373682d656432353531390000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d0000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d73686131000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d73686131000000156e6f6e652c7a6c6962406f70656e7373682e636f6d000000156e6f6e652c7a6c6962406f70656e7373682e636f6d00000000000000000000000000"));
        exchangeHash
                .setServerHostKey(ArrayConverter
                        .hexStringToByteArray("0000001365636473612d736861322d6e69737470323536000000086e69737470323536000000410435496f94112c3234092471322c26dd21ebfd2da156e5a17dcc5dc98020afedd64ae82e5d4c28251187a2191fe85ae43de9734711c087b784eaa713d5b6e06541"));
        exchangeHash.setClientECDHPublicKey(ecdhInit.getPublicKey().getValue());
        exchangeHash.setServerECDHPublicKey(ecdhReply.getEphemeralPublicKey().getValue());
        exchangeHash.setSharedSecret(ArrayConverter
                .hexStringToByteArray("13625c19127efdb1b15f1d5f48550760f29228342fbc438c06c56d795f31d109"));

        assertArrayEquals(expectedHash, exchangeHash.get());
    }

}
