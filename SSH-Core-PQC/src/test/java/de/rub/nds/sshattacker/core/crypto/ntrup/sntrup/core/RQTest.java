/*
 * SSH-Attacker - A Modular Penetration Testing Framework for SSH
 *
 * Copyright 2014-2022 Ruhr University Bochum, Paderborn University, and Hackmanit GmbH
 *
 * Licensed under Apache License 2.0 http://www.apache.org/licenses/LICENSE-2.0
 */
package de.rub.nds.sshattacker.core.crypto.ntrup.sntrup.core;

import static org.junit.Assert.assertTrue;

import java.util.Random;
import java.util.stream.LongStream;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Test;

public class RQTest {
    private static final Logger LOGGER = LogManager.getLogger();
    SntrupParameterSet set = SntrupParameterSet.KEM_SNTRUP_761;
    Random rand = new Random();
    long[] coefficient;

    @Test
    public void testRQcreation() {

        long[] coeff = new long[set.getP()];
        coeff[0] = -1888;
        RQ rq = new RQ(set, coeff);
        assertTrue(
                "Coefficients have to be between (-(q-1)/2 and (q-1)/2",
                rq.stream().toArray()[0] == -1888);
    }

    @Test
    public void testInvert() {
        long[] coeff = new long[set.getP()];
        coeff[0] = -1888;
        RQ rq = new RQ(set, coeff);
        RQ rqInv = RQ.invert(rq);

        long[] res = new long[set.getP()];
        res[0] = 1;
        RQ rqRes = new RQ(set, res);
        assertTrue("rqInv is not the inversion of", RQ.multiply(rq, rqInv).equals(rqRes));
    }

    @Test
    public void testEncoding() {

        for (int i = 0; i < 100; i++) {
            coefficient =
                    LongStream.range(0, set.getP())
                            .map(
                                    l ->
                                            rand.nextInt(set.getQ()) % set.getQ()
                                                    - ((set.getQ() + 1) / 2))
                            .toArray();
            RQ rq = new RQ(set, coefficient);
            byte[] encoded = rq.encode();
            LOGGER.info("RQ_encode bytes: " + encoded.length);
            RQ decoded = RQ.decode(set, encoded);
            assertTrue("rq != decoded", rq.equals(decoded));
        }
    }

    @Test
    public void testEncodingOld() {
        coefficient =
                LongStream.range(0, set.getP())
                        .map(l -> rand.nextInt(set.getQ()) - ((set.getQ() + 1) / 2))
                        .toArray();
        long[] test = {
            1829, 1757, 970, 441, 1131, 1598, 1624, -1371, 271, 1977, 1134, 25, 383, -2265, 526,
            1313, 1002, -848, 697, -1022, -531, 2185, -549, 2275, 1681, 1382, -1973, -1790, 326,
            -2205, 1495, -1979, -1755, 2082, -923, -790, 1109, 1695, -1391, -419, -1125, 113, 1110,
            1301, -101, -1416, -1512, -1564, -2217, -468, 1089, 1899, 1405, 1010, -2092, -2156,
            -1900, -2059, 2062, 2251, -2012, 2070, -1937, -1250, 1851, 1629, -198, -1722, -1023,
            -2072, -1276, 1578, -9, -950, -1005, 785, -156, -1987, 2149, -1964, -1679, 120, 1485,
            -170, 1868, -1161, 1888, -220, -1121, -263, 89, 1934, -1548, -588, 1181, -1050, 2101,
            310, -596, 519, 1672, 26, -763, 225, 1813, 1674, -780, -1876, 2261, -610, 873, 1970,
            1824, -1269, -302, -1588, -165, -176, 1977, -2211, -16, 120, -828, 794, 1385, -919,
            -1506, -679, -1018, -101, 289, 1848, -1853, -206, 1773, 1399, 439, -2295, -1907, -1604,
            -1724, -447, -472, -1934, 694, 1062, -413, -815, 97, 2044, 1106, -110, -1428, -187,
            2172, 2022, 1349, -332, -1060, 1739, -2003, 839, -2076, -1896, -175, 2134, -504, 1099,
            1057, -1683, -592, -1034, -650, 1955, -1333, -881, 324, 1910, 2254, -1744, -1427, 78,
            98, -1106, 538, -2143, 518, -1787, 324, -1377, -652, 1011, 1934, 1002, -1605, 1095,
            2190, 1020, 770, 1726, 1653, -784, -1768, 1817, 240, -1810, -1180, -417, 1601, 1155,
            1271, 1384, -1174, 865, 2006, 223, -673, -320, -417, 162, 947, 218, -981, -795, 31,
            -273, 1946, 1033, 1659, -1795, -1597, -1538, 272, -1521, -477, -2047, 589, 329, 1786,
            -765, 731, -1940, -2, 1550, 1726, 1109, 993, 1622, -1176, -808, 1520, 1508, 1018, -292,
            -138, -2099, -163, -1641, 359, 1116, 1157, -1313, -1237, 1727, -89, 100, -872, -1147,
            410, -444, 1378, -1233, 1396, 1102, 534, 923, -2088, 55, 912, -1295, 1534, -1039, 692,
            2094, -1134, 47, 1239, 2170, -1040, -1385, 1297, -635, 804, 813, 1058, -1184, 157, -19,
            -822, -813, -1317, 2285, 1150, 2238, 488, -1368, 34, 686, -1469, 486, 2057, 1729, -1183,
            514, -805, 173, 1110, -983, -572, 2046, -2230, -1336, -1512, -1660, -1729, 1179, 117,
            -2135, 658, 1980, 854, -935, 2131, 104, -864, 1064, -1342, 2227, 843, -603, -950, -1248,
            987, -715, 1096, -2273, 1962, -1015, 1683, -285, -630, -829, -1668, 2021, -718, -728,
            495, 1275, -901, 1126, 2258, 20, -939, 85, -1692, 1714, 785, -911, -2227, -839, 1320,
            606, -1504, 271, -1816, -2162, 1164, -753, -168, 1924, -1653, -1871, 2279, 1651, -2040,
            67, 1850, -956, 2094, 72, -1073, 364, -565, 1177, 1163, -781, 1921, -801, 1419, -821,
            666, 2088, -1257, 1731, 1400, 585, -89, 2037, -712, 1334, 718, 1980, 1689, -905, 1301,
            -526, -517, -1850, 920, -1298, 959, -1161, 1380, -2020, -1617, -581, -363, 695, -532,
            802, 617, 838, -1764, -401, -768, 1891, -1227, 627, -1640, -1368, 571, -1093, -2288,
            1875, 1132, -705, -1414, -41, -1799, -126, -453, 166, -1865, -1424, -186, 270, 1006,
            1480, -722, -1401, 2183, 1409, -2194, 1456, 150, -1014, -1119, 1816, 304, -1438, 659,
            2164, 1082, 1341, -500, -204, 954, -65, -1381, 1140, 2194, -1664, 118, -1713, 1082,
            1699, 183, -57, 278, 974, 413, -13, -1837, -904, -1435, 1981, -978, -1456, -555, -227,
            -1624, 1879, -1420, -889, -733, -1209, -2196, -1795, -356, 1017, -1191, -1490, -1094,
            1875, 1843, -1403, -112, 975, -1154, 596, 1626, -1251, -947, -1284, 684, 666, -467, 295,
            -69, -336, 2249, -1211, 1672, -136, -1210, 1795, 710, -1240, -12, -17, -2063, -1389,
            592, -1869, -1947, -901, 426, -1289, 1173, -173, -577, -1695, -1843, -1757, -541, 613,
            -153, -560, 401, 1574, -295, -1541, 2098, 2269, -1047, -1492, -1163, -905, 619, -2225,
            -1742, -1109, 606, -1197, -229, 2204, -942, -161, -759, -853, 1163, 218, 1428, 68, 1885,
            -1765, -185, 653, 1237, -1209, 664, 57, 1838, -1183, 1156, -221, 305, 1937, -1360, 636,
            904, 1212, -565, 1120, 1110, 775, -889, 1784, -1389, 1959, 1393, -470, 513, -2263, 2127,
            311, 1250, 2254, -2249, -1943, -1602, -56, 1444, 769, -2037, 816, -1860, -1696, -1400,
            -808, 679, 310, -747, -100, 156, 691, -1637, 367, -1914, 868, -1804, -1345, 1143, -373,
            -1595, 663, 241, -377, 1846, -1207, 1215, 1431, 1055, -1980, -900, -703, -2125, 1392,
            427, 711, 895, 1392, -649, -1808, 587, 1957, 51, -620, 536, -925, 2289, -461, 1242,
            -1589, 2219, -557, 2157, 1481, 1089, 1126, -1197, -1794, 715, 862, 1657, -907, -244,
            -629, -1956, 869, -2292, -376, 908, 1610, 2068, -964, -691, -669, 2, 417, 2149, 523,
            -324, 1909, 1154, -2219, 766, 1290, -1920, -949, -1805, 1176, 1887, -1010, 1997, 153,
            -1905, -1303, -1410, -950, -1582, 2060, -1782, -937, 127, 2277, -1014, -989, 1507,
            -1683, -848, 10, 1552, 326, -1857, -1896, 2271, -602, 620, 94, 912, -343, -262, -639,
            232, 1327, -769, -1494, -472, 1885, -902, -1648, -1922, 259, -1457, 1864, 2146, -470,
            1646, -1349, 1580
        };
        RQ rq = new RQ(set, coefficient);
        // LOGGER.info("Coefficients: " + Arrays.toString(rq.stream().toArray()));
        byte[] encRq = rq.encode_old();
        LOGGER.info("RQ_encode bytes: " + encRq.length);
        RQ rqNew = RQ.decode_old(set, encRq);
        assertTrue("rq != rqNew", rq.equals(rqNew));
    }
}
